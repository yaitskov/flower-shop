# схема данных цветочного магазина


# объект хранить ссылку на одно изображение
# фотографии используются во многих сущностях
# например о фотографиях нужно знать их высоту и ширину
# чтобы правильно растягивать

# одна и таже фотография может использоваться во многих местах ( подсчет ссылок )
# вместо хранения полного имени файла можно хранить только ключ
Photo:
  columns:
    # кол-во ссылок на сущность
    numlinks: { type: integer, notnull: true, default: 0, range: [0,1000000] }
    # путь к файлу
    path: { type: string(255), notnull: true }
    # формат файла ( расширение )
    extention: { type: string(10), notnull: true }
    # размеры в пикселях
    width: { type: integer }
    height: { type: integer }
#    publisher_id: { type: integer, notnull: true }
#  relations:
#    Photo: { local: publisher_id, foreign: id }

AlbumElement:
  columns:
    photo_id: { type: integer, notnull: true }
    album_id: { type: integer, notnull: true }
    # порядок фотографий в альбоме
    itmorder: { type: integer, notnull: true }
  relations:
    Photo: { onDelete: CASCADE, local: photo_id, foreign: id }
    PhotoAlbum: { onDelete: CASCADE, local: album_id, foreign: id }
    
# альбом фотографий
PhotoAlbum:
  actAs: { Timestampable: ~ }

# о самом веб сайте ( сущность в единственном экземпляре )  
WebSite:
  columns:
    # кол-во посещений сайта за час
    visitors_a_hour: { type: integer, notnull: true, default: 0 }
    # кол-во посещений сайта за сутки
    visitors_a_day: { type: integer, notnull: true, default: 0 }
    support_email: { type: string(100) }
    # год основания сайта / магазина
    birth_year: { type: integer }
    # о веб сайте
    about: { type: string(4000) }

# статистика за сутки по часам  
DayStatistic:
  columns:
    # номер часа в сутка от 0 до 23
    hour: { type: integer, notnull: true, unique: true }
    # кол-во посещений сайта - те сколько разных людей посетило его
    # учитывается загрузка только первой страницы
    visits: { type: integer, notnull: true }
    # кол-во заказов
    orders: { type: integer, notnull: true }    
    # кол-во сообщений
    messages: { type: integer, notnull: true }    
    # кол-во посещений зарегистрированных пользователей
    authenticated_visits: { type: integer, notnull: true }

# статистика за год по дням
YearStatistic:
  columns:
    # день к которому относится запись
    created_at: { type: date, notnull: true, unique: true }
    visits: { type: integer, notnull: true }
    # кол-во заказов
    orders: { type: integer, notnull: true }    
    # кол-во сообщений
    messages: { type: integer, notnull: true }    
    # кол-во посещений зарегистрированных пользователей
    authenticated_visits: { type: integer, notnull: true }
    
# цветочный магазин
# хранить общие параметры
FlowerShop:
  columns:
    # телефон магазина, также у каждого сотрудника есть опция
    # считать его телефон телефоном магазина ( например когда он дежурный )
    phone: { type: string(255) }
    # часы работы
    start_work_at: { type: time }
    end_work_at: { type: time }
    # официальное название
    name: { type: string(255), notnull: true }
    # адрес электронной почты
    email_address: { type: string(100), email: true, default: '' }
    # точный почтовый адрес
    mail_address: { type: string(512), default: '' }
    # доходчивое описание как легче все добраться до нас
    outline_route: { type: string(3000), default: '' }
    # координаты магазина для яднекс карты
    # точка на карте описывается двумя вещественными числами
    # центр карты левее центра чуть
    map_x: { type: decimal, scale: 6, size: 6  }
    map_y: { type: decimal, scale: 6, size: 6 }
    # центр объекта 39.786857, 47.267104
    place_x: { type: decimal, scale: 6, size: 6 }
    place_y: { type: decimal, scale: 6, size: 6 }
    # масштаб карты от 0 до 17
    map_scale: { type: integer, notnull: true, default: 13, range: [0,17] }
    # размеры окна в пикселях
    map_width: { type: integer, notnull: true, default: 600, range: [100,10000] }
    map_heigth: { type: integer, notnull: true, default: 400, range: [100,10000] }
    views: { type: integer, notnull: true }
  relations:
    # виды магазина с улициы
    PhotoAlbum: { onDelete: RESTRICT, local: views, foreign: id }

    
# пользователь сайта может блогером, работником, администратором и клиентом
SiteUser:
  actAs: { Timestampable: ~ }
  columns:
    login: { type: string(30), notnull: true, unique: true }
    # у каждого пользователя должен быть уникальный почтовый ящик
    # так как он будет использоваться для восстановления пароля
    email: { type: string(100), notnull: true, unique: true }
    # имя
    firstname: { type: string(100), notnull: true }
    # фамилия
    lastname: { type: string(100), notnull: true }
    # отчество
    patronymic: { type: string(100), notnull: true }
    # личный телефон 
    personal_phone: { type: string(50) }
    # рабочий телефон только для для сотрудников
    employee_phone: { type: string(50) }
    # может писать сообщения на форуме ( блогер )
    is_blogger: { type: boolean, notnull: true, default: false }
    # подпись после каждого сообщения
    signature: { type: string(255)  }
    # может делать авторизованные заказы ( клиент )
    is_client: { type: boolean, notnull: true, default: false }
    # скидка клиенту
    discount: { type: float, scale: 6, notnull: true, default: 0.0 }
    # хэш пароля
    password: { type: string(255), notnull: true }
    # администратор - самые широкие полномочия
    is_root: { type: boolean, notnull: true, default: false }
    # время регистрации в системе
    registered_at: { type: timestamp, notnull: true }
    # работник
    is_employee: { type: boolean, notnull: true, default: false }
    
    # дата последнего посещения сайта ( последня активность ) 
    last_login_at: { type: timestamp, notnull: true }
    face_id: { type: integer }
  relations:    
    # ссылка на фотографию
    Photo: { onDelete: SET NULL, local: face_id, foreign: id }
    

# букет цветов ( в общем какой то товар который
# делается под заказ по некоторому шаблону )
Posy:
  actAs: { Timestampable: ~ }
  columns:
    # это описание букета созданное клиентом и заказанное хотябы один раз
    # поэтому оно храниться в базе так как может понравить еще кому нибудь
    client_made: { type: boolean, notnull: true, default: false }
    # счетчик ссылок на букет из видов букетов
    numlinks: { type: integer, notnull: true, default: 0 }
    # название букета
    name: { type: string(100), notnull: true, unique: true }
    # пояснение, описание
    description: { type: string(3000) }
    # время размещения материала
    published_at: { type: timestamp, notnull: true }
    # время создания работы автором
    created_at: { type: timestamp, notnull: true }
    # метод формирования цены ( цена не указана, цена постоянная,
    # переменная
    price_type: { type: enum, values [ unknown, constant, variable ], notnull: true }
    # постоянная составляющая цены 
    const_price: { type: float, notnull: true, default: 0.0 }
    # переменная состовляющая для каждого компонента своя
    # путь к изображению иконки для букета
    icon: { type: string(255) }    
    publisher_id: { type: integer, notnull: true }
    author_id: { type: integer, notnull: true }    
    album_id: { type: integer, notnull: true }

  relations:
    # автор материала тот кто его выложил на сайт 
    SiteUser: { onDelete: CASCADE, local: publisher_id, foreign: id }
    # автор работы
    SiteUser: { onDelete: CASCADE, local: author_id, foreign: id }    
    # альбом фотографий букета
    PhotoAlbum: { onDelete: CASCADE, local: album_id, foreign: id }


# вид букета ( из роз, свадебный )
# один букет может быть в нескольких 
PosyView:
  columns:
    name: { type: string(100), notnull: true, unique: true }
    description: { type: string(3000) }
    # порядок группы в списке видов букетов
    grporder: { type: integer, notnull: true }

# таблица связка нужна потому что один и тот же букет
# може быть в разных категориях
PosyViewList:
  columns:
    # порядок букетов в группе
    itmorder: { type: integer, notnull: true }
    posy_id: { type: integer, notnull: true }
    posyview_id:  { type: integer, notnull: true }
  relations:
    Posy: { onDelete: CASCADE, local: posy_id, foreign: id }
    PosyView: { onDelete: CASCADE, local: posyview_id, foreign: id }

Measure:
  columns:
    name: { type: string(10), notnull: true, unique: true }
    logname: { type: string(255), notnull: true }
    
# категораия товара ( искуственные цветы, открытки, горшки, почва, удобрения )
ProductCategory:
  actAs: { Timestampable: ~ }
  columns:
    is_flower: { type: boolean, notnull: true, default: false }
    name: { type: string(100), notnull: true, unique: true }
    description: { type: string(3000) }
    catorder: { type: integer, notnull: true, unique: true, range: [0,1000000] }
    created_at: { type: timestamp, notnull: true }
    # единица измерения 
    measure_id: { type: integer }
    # иконка категории товаров
    icon_id: { type: integer }
    publisher_id: { type: integer, notnull: true }
  relations:
    Measure: { onDelete: CASCADE, local: measure_id, foreign: id }
    Photo: { onDelete: SET NULL, local: icon_id, foreign: id }
    SiteUser: { local: publisher_id, foreign: id }
# отношение цвет

Color:
  columns:
    name: { type: string(255), notnull: true, unique: true }
    # значение цвета в rgb
    rgbvalue: { type: string(6), notnull: true }

ColorList:

# набор цветов    
ColorListElement:
  columns:
    color_id: { type: integer, notnull: true }
    list_id: { type: integer, notnull: true }
  relations:
    Color: { onDelete: CASCADE, local: color_id, foreign: id }
    ColorList: { onDelete: CASCADE, local: list_id, foreign: id }

# чуствительность к солнцу    
SunSense:
  columns:
    name: { type: string(10), notnull: true, unique: true }
#     
Blossoming:
  columns:
    name: { type: string(10), notnull: true, unique: true }
    
Sex:
  columns:
    name: { type: string(10), notnull: true, unique: true }
    
#  товар
Product:
  actAs: { Timestampable: ~ }
  columns:
    # название товара ( горшок )
    name: { type: string(255), notnull: true }
    # описание
    description: { type: string(4000) }
    # производитель
    vendor: { type: string(255) }
    # кол-во товара
    amount: { type: integer, notnull: true, default: 0, range: [0,1000000] }
    # цена за ед. если null значит не извесна
    price: { type: float }
    # дата последнего поступления
    last_entrance: { type: timestamp, notnull: true }
    # здесь могу быть комнатные растения
    is_home_plant: { type: boolean, notnull: true }
    # требования к хранению ( дипазон температур, влажности, освещенность )
    temperature_range: { type: string(20), regexp: '/^[0-9]+-[0-9]+$/' }
    # время цветения постоянно, не цветет и диапазон
    blossoming_id: { type: integer }
    blossoming_start: { type: date }
    blossoming_end: { type: date }
    #  солнце
    sun: { type: integer } 
    # переодичность полива
    sprinkling_period: { type: string(100) }
    # размеры ( у открыток a4 a5 ... )
    size: { type: string(30) }
    # вес
    weight: { type: float } 
    # требования к почве
    category_id: { type: integer, notnull: true }
    icon_id: { type: integer }
    album_id: { type: integer }        
    color_id: { type: integer }
    publisher_id: { type: integer, notnull: true }
  relations:
    SiteUser: { local: publisher_id, foreign: id }    
    SunSense: { local: sun, foreign: id }
    Blossoming: { local: blossoming_id, foreign: id }
    ProductCategory: { onDelete: CASCADE, local: category_id, foreign: id }
    PhotoAlbum: { onDelete: CASCADE, local: album_id, foreign: id }
    Photo: { onDelete: CASCADE, local: icon_id, foreign: id }
    # основной цвет     
    Color: { onDelete: CASCADE, local: color_id, foreign: id }

Season:
  columns:
    name: { type: string(40), notnull: true, unique: true }
    # отношение порядка зима, весна, лето, осень
    sorder: { type: integer, notnull: true, unique: true }

FaceUptime:
  columns:
    name: { type: string(10), notnull: true, unique: true }
    
# отношение    
# отношение цветы ( для букетов )
Flower:
  actAs: { Timestampable: ~ }
  columns:
    # полей название не допустимо
    # происхождение ( голанская / месная )
    comment: { type: string(100) }
    # как ухаживать ( с какими цветами не переносимость )    
    howcare: { type: string(4000) }
    created_at: { type: timestamp, notnull: true }
    # время последнего поступления
    updated_at: { type: timestamp, notnull: true }
    # высота ноги ( см )
    legheight: { type: integer }
    # цена штуки
    price: { type: float }
    # коэф-ет сложности за работу 
    work_factor: { type: float, notnull: true, default: 1.0 }    
    # кому дариться м/ж/ всем
    sex: { type: integer } 
    # возрастная категория
    start_age: { type: integer }
    end_age: { type: integer }
    # кол-во штук
    amount: { type: integer, notnull: true, default: 0 }
    # температурный диапазон ( градусы )
    lowest_temperature: { type: integer }
    highest_temperature: { type: integer }
    # среднее время товарного вида цветка
    uptime_measure: { type: integer } 
    uptime: { type: integer }
    season_start: { type: integer }
    season_end: { type: integer }
    album_id: { type: integer }
    icon_id: { type: integer }
    publisher_id: { type: integer, notnull: true }
    color_id: { type: integer }
    category_id: { type: integer, notnull: true }
  relations:
    FaceUptime: { local: uptime_measure, foreign: id }
    ProductCategory: { local: category_id, foreign: id }
    Sex: { local: sex, foreign: id }
    # сезон цветения / когда есть в продаже
    Season: { onDelete: CASCADE, local: season_start, foreign: id }    
    Season: { onDelete: CASCADE, local: season_end, foreign: id }    
    PhotoAlbum: { onDelete: CASCADE, local: album_id, foreign: id }
    Photo: { onDelete: CASCADE, local: icon_id, foreign: id }
    SiteUser: { onDelete: CASCADE, local: publisher_id, foreign: id }
    Color: { onDelete: CASCADE, local: color_id, foreign: id }    

#состав букета из цветов    
FlowerPosy:
  columns:
    # кол-во цветка в букете
    amount: { type: integer }
    flower_id: { type: integer, notnull: true }
    posy_id: { type: integer, notnull: true }    
  relations:
    Flower: { onDelete: CASCADE, local: flower_id, foreign: id }
    Posy: { onDelete: CASCADE, local: posy_id, foreign: id }

# остальные элементы входящие в букет ( ленты, фольга и тд)
UsedProducts:
  columns:
    # кол-во на один букет
    amount: { type: integer }
    product_id: { type: integer }
    posy_id: { type: integer }
  relations:
    Product: { onDelete: CASCADE, local: product_id, foreign: id }
    Posy: { onDelete: CASCADE, local: posy_id, foreign: id }

    
# заказы клиентов
Orders:
  actAs: { Timestampable: ~ }
  columns:
    # номер заказа 
    number: { type: string(40), notnull: true, unique: true }
    # когда заказ принят ( клиент только что заказал )
    ordered_at: { type: timestamp, notnull: true }
    # срок к котору требуется выполнить заказ
    deadline: { type: timestamp, notnull: true }
    # время принятия заказа
    accepted_at: { type: timestamp }
    # время когда заказ стал готов
    completed_at: { type: timestamp }
    # заказ отменен
    canceled_at: { type: timestamp }    
    cancel_description: { type: string(255) }
    # информация о заказе требования клиента
    client_requirements: { type: string(4000) }
    # информация о клиенте
    # телефон
    client_phone: { type: string(50), notnull: true }
    # фамилия имя отчество
    client_name: { type: string(100), notnull: true }
    #
    client_email: { type: string(100) }
    # сумма заказа без учета скидок в рублях
    order_amount: { type: float, notnull: true }
    client_id: { type: integer }
    responsible_id: { type: integer }
    posy_id: { type: integer, notnull: true }
  relations:
    # если зарегистрированный клиент
    SiteUser: { onDelete: CASCADE, local: client_id, foreign: id }
    # ответственный за выполение заказа тот кто его принял и начал вязать букет
    SiteUser: { onDelete: CASCADE, local: responsible_id, foreign: id }
    # готовый букет либо букет собранный в конструкторе самим клиентом 
    Posy: { onDelete: CASCADE, local: posy_id, foreign: id }
    
# для форума темы, сообщения, прикрепленные документы
ForumTheme:
  actAs: { Timestampable: ~ }
  columns:
    # заголовок темы / вопроса
    name: { type: string(255), notnull: true }
    created_at: { type: timestamp, notnull: true }
    # тема важная и постоянная всегда весит вышие обычных тем
    # если не null. Если не null значит порядок среди таких же тем
    pinned_order: { type: integer }
    # тема заморожена и в нее нельзя добавлять сообщения всем кроме администраторов
    freezed: { type: boolean, notnull: true, default: false }
    author_id: { type: integer, notnull: true }
  relations:
    SiteUser: { onDelete: CASCADE, local: author_id, foreign: id }

ForumPost:
  actAs: { Timestampable: ~ }
  columns:
    body: { type: string(8000), notnull: true }
    created_at: { type: timestamp, notnull: true }
    author_id: { type: integer, notnull: true }    
  relations:
    SiteUser: { onDelete: CASCADE, local: author_id, foreign: id }
    
# объявления
# вопросы/ответы или статьи
#таблица дежурств чтобы знать кому отправлять смс или письма с уведомлением
# о том чтобы приступить к выполнение работ


