<?php

/**
 * BaseFlower
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $comment
 * @property string $howcare
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property integer $legheight
 * @property float $price
 * @property float $work_factor
 * @property integer $sex
 * @property integer $start_age
 * @property integer $end_age
 * @property integer $amount
 * @property integer $lowest_temperature
 * @property integer $highest_temperature
 * @property integer $uptime_measure
 * @property integer $uptime
 * @property integer $season_start
 * @property integer $season_end
 * @property integer $album_id
 * @property integer $icon_id
 * @property integer $publisher_id
 * @property integer $color_id
 * @property integer $category_id
 * @property FaceUptime $FaceUptime
 * @property ProductCategory $ProductCategory
 * @property Sex $Sex
 * @property Season $Season
 * @property PhotoAlbum $PhotoAlbum
 * @property Photo $Photo
 * @property SiteUser $SiteUser
 * @property Color $Color
 * @property Doctrine_Collection $FlowerPosy
 * 
 * @method string              getComment()             Returns the current record's "comment" value
 * @method string              getHowcare()             Returns the current record's "howcare" value
 * @method timestamp           getCreatedAt()           Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()           Returns the current record's "updated_at" value
 * @method integer             getLegheight()           Returns the current record's "legheight" value
 * @method float               getPrice()               Returns the current record's "price" value
 * @method float               getWorkFactor()          Returns the current record's "work_factor" value
 * @method integer             getSex()                 Returns the current record's "sex" value
 * @method integer             getStartAge()            Returns the current record's "start_age" value
 * @method integer             getEndAge()              Returns the current record's "end_age" value
 * @method integer             getAmount()              Returns the current record's "amount" value
 * @method integer             getLowestTemperature()   Returns the current record's "lowest_temperature" value
 * @method integer             getHighestTemperature()  Returns the current record's "highest_temperature" value
 * @method integer             getUptimeMeasure()       Returns the current record's "uptime_measure" value
 * @method integer             getUptime()              Returns the current record's "uptime" value
 * @method integer             getSeasonStart()         Returns the current record's "season_start" value
 * @method integer             getSeasonEnd()           Returns the current record's "season_end" value
 * @method integer             getAlbumId()             Returns the current record's "album_id" value
 * @method integer             getIconId()              Returns the current record's "icon_id" value
 * @method integer             getPublisherId()         Returns the current record's "publisher_id" value
 * @method integer             getColorId()             Returns the current record's "color_id" value
 * @method integer             getCategoryId()          Returns the current record's "category_id" value
 * @method FaceUptime          getFaceUptime()          Returns the current record's "FaceUptime" value
 * @method ProductCategory     getProductCategory()     Returns the current record's "ProductCategory" value
 * @method Sex                 getSex()                 Returns the current record's "Sex" value
 * @method Season              getSeason()              Returns the current record's "Season" value
 * @method PhotoAlbum          getPhotoAlbum()          Returns the current record's "PhotoAlbum" value
 * @method Photo               getPhoto()               Returns the current record's "Photo" value
 * @method SiteUser            getSiteUser()            Returns the current record's "SiteUser" value
 * @method Color               getColor()               Returns the current record's "Color" value
 * @method Doctrine_Collection getFlowerPosy()          Returns the current record's "FlowerPosy" collection
 * @method Flower              setComment()             Sets the current record's "comment" value
 * @method Flower              setHowcare()             Sets the current record's "howcare" value
 * @method Flower              setCreatedAt()           Sets the current record's "created_at" value
 * @method Flower              setUpdatedAt()           Sets the current record's "updated_at" value
 * @method Flower              setLegheight()           Sets the current record's "legheight" value
 * @method Flower              setPrice()               Sets the current record's "price" value
 * @method Flower              setWorkFactor()          Sets the current record's "work_factor" value
 * @method Flower              setSex()                 Sets the current record's "sex" value
 * @method Flower              setStartAge()            Sets the current record's "start_age" value
 * @method Flower              setEndAge()              Sets the current record's "end_age" value
 * @method Flower              setAmount()              Sets the current record's "amount" value
 * @method Flower              setLowestTemperature()   Sets the current record's "lowest_temperature" value
 * @method Flower              setHighestTemperature()  Sets the current record's "highest_temperature" value
 * @method Flower              setUptimeMeasure()       Sets the current record's "uptime_measure" value
 * @method Flower              setUptime()              Sets the current record's "uptime" value
 * @method Flower              setSeasonStart()         Sets the current record's "season_start" value
 * @method Flower              setSeasonEnd()           Sets the current record's "season_end" value
 * @method Flower              setAlbumId()             Sets the current record's "album_id" value
 * @method Flower              setIconId()              Sets the current record's "icon_id" value
 * @method Flower              setPublisherId()         Sets the current record's "publisher_id" value
 * @method Flower              setColorId()             Sets the current record's "color_id" value
 * @method Flower              setCategoryId()          Sets the current record's "category_id" value
 * @method Flower              setFaceUptime()          Sets the current record's "FaceUptime" value
 * @method Flower              setProductCategory()     Sets the current record's "ProductCategory" value
 * @method Flower              setSex()                 Sets the current record's "Sex" value
 * @method Flower              setSeason()              Sets the current record's "Season" value
 * @method Flower              setPhotoAlbum()          Sets the current record's "PhotoAlbum" value
 * @method Flower              setPhoto()               Sets the current record's "Photo" value
 * @method Flower              setSiteUser()            Sets the current record's "SiteUser" value
 * @method Flower              setColor()               Sets the current record's "Color" value
 * @method Flower              setFlowerPosy()          Sets the current record's "FlowerPosy" collection
 * 
 * @package    donbuket
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFlower extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('flower');
        $this->hasColumn('comment', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('howcare', 'string', 4000, array(
             'type' => 'string',
             'length' => 4000,
             ));
        $this->hasColumn('created_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('updated_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('legheight', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('price', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('work_factor', 'float', null, array(
             'type' => 'float',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('sex', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('start_age', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('end_age', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('amount', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('lowest_temperature', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('highest_temperature', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('uptime_measure', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('uptime', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('season_start', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('season_end', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('album_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('icon_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('publisher_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('color_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('FaceUptime', array(
             'local' => 'uptime_measure',
             'foreign' => 'id'));

        $this->hasOne('ProductCategory', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $this->hasOne('Sex', array(
             'local' => 'sex',
             'foreign' => 'id'));

        $this->hasOne('Season', array(
             'local' => 'season_end',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('PhotoAlbum', array(
             'local' => 'album_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Photo', array(
             'local' => 'icon_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('SiteUser', array(
             'local' => 'publisher_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Color', array(
             'local' => 'color_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('FlowerPosy', array(
             'local' => 'id',
             'foreign' => 'flower_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}