<?php

/**
 * BaseFlowerShop
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $phone
 * @property time $start_work_at
 * @property time $end_work_at
 * @property string $name
 * @property string $email_address
 * @property string $mail_address
 * @property string $outline_route
 * @property decimal $map_x
 * @property decimal $map_y
 * @property decimal $place_x
 * @property decimal $place_y
 * @property integer $map_scale
 * @property integer $map_width
 * @property integer $map_heigth
 * @property integer $views
 * @property PhotoAlbum $PhotoAlbum
 * 
 * @method string     getPhone()         Returns the current record's "phone" value
 * @method time       getStartWorkAt()   Returns the current record's "start_work_at" value
 * @method time       getEndWorkAt()     Returns the current record's "end_work_at" value
 * @method string     getName()          Returns the current record's "name" value
 * @method string     getEmailAddress()  Returns the current record's "email_address" value
 * @method string     getMailAddress()   Returns the current record's "mail_address" value
 * @method string     getOutlineRoute()  Returns the current record's "outline_route" value
 * @method decimal    getMapX()          Returns the current record's "map_x" value
 * @method decimal    getMapY()          Returns the current record's "map_y" value
 * @method decimal    getPlaceX()        Returns the current record's "place_x" value
 * @method decimal    getPlaceY()        Returns the current record's "place_y" value
 * @method integer    getMapScale()      Returns the current record's "map_scale" value
 * @method integer    getMapWidth()      Returns the current record's "map_width" value
 * @method integer    getMapHeigth()     Returns the current record's "map_heigth" value
 * @method integer    getViews()         Returns the current record's "views" value
 * @method PhotoAlbum getPhotoAlbum()    Returns the current record's "PhotoAlbum" value
 * @method FlowerShop setPhone()         Sets the current record's "phone" value
 * @method FlowerShop setStartWorkAt()   Sets the current record's "start_work_at" value
 * @method FlowerShop setEndWorkAt()     Sets the current record's "end_work_at" value
 * @method FlowerShop setName()          Sets the current record's "name" value
 * @method FlowerShop setEmailAddress()  Sets the current record's "email_address" value
 * @method FlowerShop setMailAddress()   Sets the current record's "mail_address" value
 * @method FlowerShop setOutlineRoute()  Sets the current record's "outline_route" value
 * @method FlowerShop setMapX()          Sets the current record's "map_x" value
 * @method FlowerShop setMapY()          Sets the current record's "map_y" value
 * @method FlowerShop setPlaceX()        Sets the current record's "place_x" value
 * @method FlowerShop setPlaceY()        Sets the current record's "place_y" value
 * @method FlowerShop setMapScale()      Sets the current record's "map_scale" value
 * @method FlowerShop setMapWidth()      Sets the current record's "map_width" value
 * @method FlowerShop setMapHeigth()     Sets the current record's "map_heigth" value
 * @method FlowerShop setViews()         Sets the current record's "views" value
 * @method FlowerShop setPhotoAlbum()    Sets the current record's "PhotoAlbum" value
 * 
 * @package    donbuket
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFlowerShop extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('flower_shop');
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('start_work_at', 'time', null, array(
             'type' => 'time',
             ));
        $this->hasColumn('end_work_at', 'time', null, array(
             'type' => 'time',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('email_address', 'string', 100, array(
             'type' => 'string',
             'email' => true,
             'default' => '',
             'length' => 100,
             ));
        $this->hasColumn('mail_address', 'string', 512, array(
             'type' => 'string',
             'default' => '',
             'length' => 512,
             ));
        $this->hasColumn('outline_route', 'string', 3000, array(
             'type' => 'string',
             'default' => '',
             'length' => 3000,
             ));
        $this->hasColumn('map_x', 'decimal', 6, array(
             'type' => 'decimal',
             'scale' => 6,
             'size' => 6,
             'length' => 6,
             ));
        $this->hasColumn('map_y', 'decimal', 6, array(
             'type' => 'decimal',
             'scale' => 6,
             'size' => 6,
             'length' => 6,
             ));
        $this->hasColumn('place_x', 'decimal', 6, array(
             'type' => 'decimal',
             'scale' => 6,
             'size' => 6,
             'length' => 6,
             ));
        $this->hasColumn('place_y', 'decimal', 6, array(
             'type' => 'decimal',
             'scale' => 6,
             'size' => 6,
             'length' => 6,
             ));
        $this->hasColumn('map_scale', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 13,
             'range' => 
             array(
              0 => 0,
              1 => 17,
             ),
             ));
        $this->hasColumn('map_width', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 600,
             'range' => 
             array(
              0 => 100,
              1 => 10000,
             ),
             ));
        $this->hasColumn('map_heigth', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 400,
             'range' => 
             array(
              0 => 100,
              1 => 10000,
             ),
             ));
        $this->hasColumn('views', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('PhotoAlbum', array(
             'local' => 'views',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));
    }
}