<?php

/**
 * BaseProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $description
 * @property string $vendor
 * @property integer $amount
 * @property float $price
 * @property timestamp $last_entrance
 * @property boolean $is_home_plant
 * @property string $temperature_range
 * @property integer $blossoming_id
 * @property date $blossoming_start
 * @property date $blossoming_end
 * @property integer $sun
 * @property string $sprinkling_period
 * @property string $size
 * @property float $weight
 * @property integer $category_id
 * @property integer $icon_id
 * @property integer $album_id
 * @property integer $color_id
 * @property integer $publisher_id
 * @property SiteUser $SiteUser
 * @property SunSense $SunSense
 * @property Blossoming $Blossoming
 * @property ProductCategory $ProductCategory
 * @property PhotoAlbum $PhotoAlbum
 * @property Photo $Photo
 * @property Color $Color
 * @property Doctrine_Collection $UsedProducts
 * 
 * @method string              getName()              Returns the current record's "name" value
 * @method string              getDescription()       Returns the current record's "description" value
 * @method string              getVendor()            Returns the current record's "vendor" value
 * @method integer             getAmount()            Returns the current record's "amount" value
 * @method float               getPrice()             Returns the current record's "price" value
 * @method timestamp           getLastEntrance()      Returns the current record's "last_entrance" value
 * @method boolean             getIsHomePlant()       Returns the current record's "is_home_plant" value
 * @method string              getTemperatureRange()  Returns the current record's "temperature_range" value
 * @method integer             getBlossomingId()      Returns the current record's "blossoming_id" value
 * @method date                getBlossomingStart()   Returns the current record's "blossoming_start" value
 * @method date                getBlossomingEnd()     Returns the current record's "blossoming_end" value
 * @method integer             getSun()               Returns the current record's "sun" value
 * @method string              getSprinklingPeriod()  Returns the current record's "sprinkling_period" value
 * @method string              getSize()              Returns the current record's "size" value
 * @method float               getWeight()            Returns the current record's "weight" value
 * @method integer             getCategoryId()        Returns the current record's "category_id" value
 * @method integer             getIconId()            Returns the current record's "icon_id" value
 * @method integer             getAlbumId()           Returns the current record's "album_id" value
 * @method integer             getColorId()           Returns the current record's "color_id" value
 * @method integer             getPublisherId()       Returns the current record's "publisher_id" value
 * @method SiteUser            getSiteUser()          Returns the current record's "SiteUser" value
 * @method SunSense            getSunSense()          Returns the current record's "SunSense" value
 * @method Blossoming          getBlossoming()        Returns the current record's "Blossoming" value
 * @method ProductCategory     getProductCategory()   Returns the current record's "ProductCategory" value
 * @method PhotoAlbum          getPhotoAlbum()        Returns the current record's "PhotoAlbum" value
 * @method Photo               getPhoto()             Returns the current record's "Photo" value
 * @method Color               getColor()             Returns the current record's "Color" value
 * @method Doctrine_Collection getUsedProducts()      Returns the current record's "UsedProducts" collection
 * @method Product             setName()              Sets the current record's "name" value
 * @method Product             setDescription()       Sets the current record's "description" value
 * @method Product             setVendor()            Sets the current record's "vendor" value
 * @method Product             setAmount()            Sets the current record's "amount" value
 * @method Product             setPrice()             Sets the current record's "price" value
 * @method Product             setLastEntrance()      Sets the current record's "last_entrance" value
 * @method Product             setIsHomePlant()       Sets the current record's "is_home_plant" value
 * @method Product             setTemperatureRange()  Sets the current record's "temperature_range" value
 * @method Product             setBlossomingId()      Sets the current record's "blossoming_id" value
 * @method Product             setBlossomingStart()   Sets the current record's "blossoming_start" value
 * @method Product             setBlossomingEnd()     Sets the current record's "blossoming_end" value
 * @method Product             setSun()               Sets the current record's "sun" value
 * @method Product             setSprinklingPeriod()  Sets the current record's "sprinkling_period" value
 * @method Product             setSize()              Sets the current record's "size" value
 * @method Product             setWeight()            Sets the current record's "weight" value
 * @method Product             setCategoryId()        Sets the current record's "category_id" value
 * @method Product             setIconId()            Sets the current record's "icon_id" value
 * @method Product             setAlbumId()           Sets the current record's "album_id" value
 * @method Product             setColorId()           Sets the current record's "color_id" value
 * @method Product             setPublisherId()       Sets the current record's "publisher_id" value
 * @method Product             setSiteUser()          Sets the current record's "SiteUser" value
 * @method Product             setSunSense()          Sets the current record's "SunSense" value
 * @method Product             setBlossoming()        Sets the current record's "Blossoming" value
 * @method Product             setProductCategory()   Sets the current record's "ProductCategory" value
 * @method Product             setPhotoAlbum()        Sets the current record's "PhotoAlbum" value
 * @method Product             setPhoto()             Sets the current record's "Photo" value
 * @method Product             setColor()             Sets the current record's "Color" value
 * @method Product             setUsedProducts()      Sets the current record's "UsedProducts" collection
 * 
 * @package    donbuket
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProduct extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 4000, array(
             'type' => 'string',
             'length' => 4000,
             ));
        $this->hasColumn('vendor', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('amount', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'range' => 
             array(
              0 => 0,
              1 => 1000000,
             ),
             ));
        $this->hasColumn('price', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('last_entrance', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('is_home_plant', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             ));
        $this->hasColumn('temperature_range', 'string', 20, array(
             'type' => 'string',
             'regexp' => '/^[0-9]+-[0-9]+$/',
             'length' => 20,
             ));
        $this->hasColumn('blossoming_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('blossoming_start', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('blossoming_end', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('sun', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('sprinkling_period', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('size', 'string', 30, array(
             'type' => 'string',
             'length' => 30,
             ));
        $this->hasColumn('weight', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('icon_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('album_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('color_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('publisher_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('SiteUser', array(
             'local' => 'publisher_id',
             'foreign' => 'id'));

        $this->hasOne('SunSense', array(
             'local' => 'sun',
             'foreign' => 'id'));

        $this->hasOne('Blossoming', array(
             'local' => 'blossoming_id',
             'foreign' => 'id'));

        $this->hasOne('ProductCategory', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('PhotoAlbum', array(
             'local' => 'album_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Photo', array(
             'local' => 'icon_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Color', array(
             'local' => 'color_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('UsedProducts', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}