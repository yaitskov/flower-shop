<?php

/**
 * BaseProductCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property boolean $is_flower
 * @property string $name
 * @property string $description
 * @property integer $catorder
 * @property timestamp $created_at
 * @property integer $measure_id
 * @property integer $icon_id
 * @property integer $publisher_id
 * @property Measure $Measure
 * @property Photo $Photo
 * @property SiteUser $SiteUser
 * @property Doctrine_Collection $Product
 * @property Doctrine_Collection $Flower
 * 
 * @method boolean             getIsFlower()     Returns the current record's "is_flower" value
 * @method string              getName()         Returns the current record's "name" value
 * @method string              getDescription()  Returns the current record's "description" value
 * @method integer             getCatorder()     Returns the current record's "catorder" value
 * @method timestamp           getCreatedAt()    Returns the current record's "created_at" value
 * @method integer             getMeasureId()    Returns the current record's "measure_id" value
 * @method integer             getIconId()       Returns the current record's "icon_id" value
 * @method integer             getPublisherId()  Returns the current record's "publisher_id" value
 * @method Measure             getMeasure()      Returns the current record's "Measure" value
 * @method Photo               getPhoto()        Returns the current record's "Photo" value
 * @method SiteUser            getSiteUser()     Returns the current record's "SiteUser" value
 * @method Doctrine_Collection getProduct()      Returns the current record's "Product" collection
 * @method Doctrine_Collection getFlower()       Returns the current record's "Flower" collection
 * @method ProductCategory     setIsFlower()     Sets the current record's "is_flower" value
 * @method ProductCategory     setName()         Sets the current record's "name" value
 * @method ProductCategory     setDescription()  Sets the current record's "description" value
 * @method ProductCategory     setCatorder()     Sets the current record's "catorder" value
 * @method ProductCategory     setCreatedAt()    Sets the current record's "created_at" value
 * @method ProductCategory     setMeasureId()    Sets the current record's "measure_id" value
 * @method ProductCategory     setIconId()       Sets the current record's "icon_id" value
 * @method ProductCategory     setPublisherId()  Sets the current record's "publisher_id" value
 * @method ProductCategory     setMeasure()      Sets the current record's "Measure" value
 * @method ProductCategory     setPhoto()        Sets the current record's "Photo" value
 * @method ProductCategory     setSiteUser()     Sets the current record's "SiteUser" value
 * @method ProductCategory     setProduct()      Sets the current record's "Product" collection
 * @method ProductCategory     setFlower()       Sets the current record's "Flower" collection
 * 
 * @package    donbuket
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProductCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product_category');
        $this->hasColumn('is_flower', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 100,
             ));
        $this->hasColumn('description', 'string', 3000, array(
             'type' => 'string',
             'length' => 3000,
             ));
        $this->hasColumn('catorder', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'unique' => true,
             'range' => 
             array(
              0 => 0,
              1 => 1000000,
             ),
             ));
        $this->hasColumn('created_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('measure_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('icon_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('publisher_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Measure', array(
             'local' => 'measure_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Photo', array(
             'local' => 'icon_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('SiteUser', array(
             'local' => 'publisher_id',
             'foreign' => 'id'));

        $this->hasMany('Product', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('Flower', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}